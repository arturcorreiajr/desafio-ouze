pipeline{
    agent any

    stages {
        stage('Get Source'){
            steps{
                git url: 'https://github.com/arturcorreiajr/desafio-ouze.git', branch: 'main'
            }

        }
        stage('Docker Build API1'){
            steps{
                script {
                    dockerapp = docker.build("arturcorreiajunior/api1:${env.BUILD_ID}", '-f ./api1/Dockerfile .')
                }
            }
        }
        stage('Anchore analyse') {
            steps {
                writeFile file: 'anchore_images', text: "arturcorreiajunior/api1:${env.BUILD_ID}"
                anchore name: 'anchore_images'
            }
        }
        stage('SonarQube analysis') {
            environment{
                scannerHome = tool 'SONAR_SCANNER'
            }
            steps {
                withSonarQubeEnv('SONAR_LOCAL') {
                    sh 'mvn sonar:sonar -Dsonar.dependencyCheck.jsonReportPath=target/dependency-check-report.json -Dsonar.dependencyCheck.xmlReportPath=target/dependency-check-report.xml -Dsonar.dependencyCheck.htmlReportPath=target/dependency-check-report.html -Dsonar.java.pmd.reportPaths=target/pmd.xml -Dsonar.java.spotbugs.reportPaths=target/spotbugsXml.xml -Dsonar.zaproxy.reportPath=target/zap-reports/zapReport.xml -Dsonar.zaproxy.htmlReportPath=target/zap-reports/zapReport.html'
                }
            }
        }

        stage("Quality gate") {
            steps {
                sh 'sleep 10'
                waitForQualityGate abortPipeline: true
            }
        }
    }
        stage('Docker Push API1'){
            steps{
                script {
                        docker.withRegistry('http://registry.hub.docker.com', 'github-token-jenkins'){
                        dockerapp.push('latest')
                        dockerapp.push("${env.BUILD_ID}")
                }
                }
            }
        }

        stage('Deploy docker'){
            steps{
                script {
                    echo "arturcorreiajunior/api1:${env.BUILD_ID}"
                    sh "docker stop api1 || true && docker rm api1 || true"
                    sh "docker run --name api1 -d -p 8080:80 arturcorreiajunior/api1:${env.BUILD_ID}"
                }
            }
        }

    }

}